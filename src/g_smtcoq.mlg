(**************************************************************************)
(*                                                                        *)
(*     SMTCoq                                                             *)
(*     Copyright (C) 2011 - 2021                                          *)
(*                                                                        *)
(*     See file "AUTHORS" for the list of authors                         *)
(*                                                                        *)
(*   This file is distributed under the terms of the CeCILL-C licence     *)
(*                                                                        *)
(**************************************************************************)


(*
this file declares all vernaculars (top-level commands)
and OCaml tactics
*)


DECLARE PLUGIN "smtcoq_plugin"

{

open Stdarg
open Ltac_plugin

}

VERNAC COMMAND EXTEND Vernac_zchaff CLASSIFIED AS QUERY
| [ "Parse_certif_zchaff" 
    ident(dimacs) ident(trace) string(fdimacs) string(fproof) ] ->
  {
    Zchaff.parse_certif dimacs trace fdimacs fproof
  }
| [ "Zchaff_Checker" string(fdimacs) string(fproof) ] ->
  {
    Zchaff.checker fdimacs fproof
  }
| [ "Zchaff_Theorem" ident(name) string(fdimacs) string(fproof) ] ->
  {
    Zchaff.theorem name fdimacs fproof
  }
END

(*
Vernaculars for the verit prover
here are also the custom commands

reference and Nametab.global name are used to identify
a definition given by name
*)
VERNAC COMMAND EXTEND Vernac_verit CLASSIFIED AS QUERY
| [ "Parse_certif_verit"
    ident(t_i) ident(t_func) ident(t_atom) ident(t_form) ident(root) ident(used_roots) ident(trace) string(fsmt) string(fproof) ] ->
  {
    Verit.parse_certif t_i t_func t_atom t_form root used_roots trace fsmt fproof
  }
| [ "Verit_Checker" string(fsmt) string(fproof) ] ->
  {
    Verit.checker fsmt fproof
  }
| [ "Verit_Checker_Debug" string(fsmt) string(fproof) ] ->
  {
    Verit.checker_debug fsmt fproof
  }
| [ "Verit_Theorem" ident(name) string(fsmt) string(fproof) ] ->
  {
    Verit.theorem name fsmt fproof
  }
| [ "Verit_Export_Bool" reference(name) string(fsmt)  ] ->
  {
    Verit.export_bool (Nametab.global name) fsmt
  }
| [ "Verit_Run" string(fsmt) string(log)  ] ->
  {
    Verit.run_verit fsmt log
  }
| [ "Verit_Import_Bool" ident(name) reference(smt) string(fsmt) string(fproof) ] ->
  {
    Verit.import_bool name (Nametab.global smt) fsmt fproof
  }
END

VERNAC COMMAND EXTEND Vernac_lfsc CLASSIFIED AS QUERY
| [ "Parse_certif_lfsc"
    ident(t_i) ident(t_func) ident(t_atom) ident(t_form) ident(root) ident(used_roots) ident(trace) string(fsmt) string(fproof) ] ->
  {
    Lfsc.parse_certif t_i t_func t_atom t_form root used_roots trace fsmt fproof
  }
| [ "Lfsc_Checker" string(fsmt) string(fproof) ] ->
  {
    Lfsc.checker fsmt fproof
  }
| [ "Lfsc_Checker_Debug" string(fsmt) string(fproof) ] ->
  {
    Lfsc.checker_debug fsmt fproof
  }
| [ "Lfsc_Theorem" ident(name) string(fsmt) string(fproof) ] ->
  {
    Lfsc.theorem name fsmt fproof
  }
END

TACTIC EXTEND Tactic_zchaff
| [ "zchaff_bool" ] -> { Zchaff.tactic () }
| [ "zchaff_bool_no_check" ] -> { Zchaff.tactic_no_check () }
END

(*
custom functions to collect and add lemmas
TODO: where is this used what exactly are these lemmas
*)
{

let lemmas_list = Summary.ref ~name:"Selected lemmas" []

let cache_lemmas (_, lems) =
  lemmas_list := lems

let declare_lemmas : CoqInterface.constr_expr list -> Libobject.obj =
  let open Libobject in
  declare_object
    {
      (default_object "LEMMAS") with
      cache_function = cache_lemmas;
      load_function = (fun _ -> cache_lemmas);
    }

let add_lemmas lems =
  Lib.add_anonymous_leaf (declare_lemmas (lems @ !lemmas_list))

let clear_lemmas () =
  Lib.add_anonymous_leaf (declare_lemmas [])

let get_lemmas () = !lemmas_list

}

VERNAC COMMAND EXTEND Add_lemma CLASSIFIED AS SIDEFF
| [ "Add_lemmas" constr_list(lems) ] -> { add_lemmas lems }
| [ "Clear_lemmas" ] -> { clear_lemmas () }
END

(*
Tactic for verit
verit_bool_base takes as argument the collect hypotheses
as option of tuple of hypotheses
*)
TACTIC EXTEND Tactic_verit
| [ "verit_bool_base" constr(lpl) ] -> { Verit.tactic lpl (get_lemmas ()) }
| [ "verit_bool_no_check_base" constr(lpl) ] -> { Verit.tactic_no_check lpl (get_lemmas ()) }
END

TACTIC EXTEND Tactic_cvc4
| [ "cvc4_bool_model" ] -> { Lfsc.tactic_model () }
| [ "cvc4_bool" ] -> { Lfsc.tactic () }
| [ "cvc4_bool_no_check" ] -> { Lfsc.tactic_no_check () }
END




(*
to return something
https://github.com/ppedrot/coq-string-ident/blob/master/src/tacstringident.mlg
https://coq.discourse.group/t/how-can-an-ocaml-tactic-return-something-else-than-unit/812

{

open Pcoq.Constr

let inj c = TacGeneric (Genarg.in_gen (Genarg.rawwit wit_ident_of_string) c)

}

GRAMMAR EXTEND Gram
  Pltac.tactic_arg :
  [ [ IDENT "ident_of_string"; c = constr -> { inj c } ] ];
END
*)